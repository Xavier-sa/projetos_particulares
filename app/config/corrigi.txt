Sim, você está correto em pensar que a configuração dos links pode estar causando os problemas ao criar novas pastas dentro de `pages`. O que acontece é que ao criar novas pastas, os caminhos relativos para recursos como imagens, CSS e links quebram, porque o navegador tenta localizar os arquivos a partir da pasta atual, e isso pode se tornar problemático à medida que você organiza seu projeto em subpastas.

### Como Corrigir os Caminhos e Torná-los Flexíveis

Você pode corrigir isso de duas maneiras:

1. **Usar o `env.php` para Definir Caminhos Dinâmicos:**
   
   No arquivo `env.php`, você pode definir as constantes para as pastas de recursos (imagens, CSS, JS, etc.) para garantir que os caminhos sejam sempre relativos à raiz do projeto, independentemente da profundidade da pasta atual.

2. **Usar Caminhos Absolutos em vez de Caminhos Relativos:**
   
   Ao definir as URLs e caminhos de recursos diretamente, é melhor usar caminhos absolutos a partir da raiz do projeto, garantindo que os links sejam sempre válidos.

### 1. Configuração no `env.php`

No arquivo `env.php`, você deve definir as constantes de diretórios da seguinte maneira para que você sempre consiga acessar as imagens, CSS, JS, etc., independentemente da pasta em que você esteja:

```php
<?php
// Definir o caminho base do projeto
define('BASE_URL', 'http://localhost/app/');  // Ajuste de acordo com a URL do seu servidor

// Caminho das imagens
define('IMG_PATH', BASE_URL . 'assets/img/');

// Caminho do CSS
define('CSS_PATH', BASE_URL . 'assets/css/');

// Caminho do JavaScript
define('JS_PATH', BASE_URL . 'assets/js/');

// Caminho para outros arquivos
define('INCLUDES_PATH', BASE_URL . 'includes/');
```

### 2. Uso do `env.php` no Arquivo da Sidebar

Ao reutilizar o código da sidebar, você pode usar essas constantes para garantir que os links estejam corretos, independentemente da pasta em que você se encontra. Veja como você pode ajustar o código da sidebar:

```php
<aside class="sidebar">
    <nav>
        <!-- Usando a constante IMG_PATH definida no env.php -->
        <img src="<?php echo IMG_PATH; ?>logo.jpg" alt="logo">
        <ul>
            <li><a href="<?php echo BASE_URL; ?>pages/home.php">Home</a></li>
            <li><a href="<?php echo BASE_URL; ?>pages/artigos.php">Artigos</a></li>
            <li><a href="<?php echo BASE_URL; ?>pages/categorias.php">Categorias</a></li>
            <li><a href="<?php echo BASE_URL; ?>pages/usuarios.php">Usuários</a></li>
            <li><a href="<?php echo BASE_URL; ?>pages/usuarioadm.php" style="display:none;">Perfil</a></li> <!--vamos ver quem presta atenção -->
        </ul>
    </nav>
</aside>
```

### Explicação

- **`BASE_URL`**: Esse valor garante que você use sempre o caminho absoluto da raiz do seu projeto, como `http://localhost/app/`, então qualquer link que você definir com `BASE_URL` sempre apontará corretamente para a raiz.
- **`IMG_PATH`, `CSS_PATH`, `JS_PATH`**: Essas variáveis definem os caminhos completos para as pastas de recursos, garantindo que a URL correta seja gerada independentemente da pasta em que você está.

### 3. Aplicando o Código em Outros Arquivos

Ao usar o código nos outros arquivos dentro de subpastas, os links para imagens, CSS e JS não quebrarão. Você pode simplesmente usar as constantes definidas no `env.php`:

```php
<link rel="stylesheet" href="<?php echo CSS_PATH; ?>style.css">
<script src="<?php echo JS_PATH; ?>script.js"></script>
<img src="<?php echo IMG_PATH; ?>example.jpg" alt="example">
```

### Resumo:

1. **Defina um caminho base (`BASE_URL`)** no seu `env.php` para garantir que você sempre aponte para a raiz do projeto, independentemente de onde o arquivo estiver.
2. **Utilize essas constantes** no código HTML para gerar links corretos para imagens, CSS, JavaScript, etc.
3. Isso evitará problemas ao mover arquivos para subpastas dentro de `pages`.

Isso deve corrigir o problema dos links quebrados ao criar novas pastas dentro de `pages`.