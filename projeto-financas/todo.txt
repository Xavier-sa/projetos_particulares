cadastrar.py:
# -*- coding: utf-8 -*-

import sys
import mysql.connector
from PySide6.QtCore import Qt
from PySide6.QtGui import QIntValidator,QIcon
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QLineEdit, QFormLayout, QVBoxLayout, QWidget, QPushButton, QMessageBox
)

from .perfil import PerfilWindow

STYLE = """
QWidget {
    background-color: #222222;
    color: #FFD700;
    font-family: 'Saiyan Sans', Arial, sans-serif;
}

QLabel {
    color: #F57C00;
    font-size: 24px;
    font-weight: bold;
    text-align: center;
}

QLineEdit {
    background-color: #333333;
    color: #FFD700;
    border: 2px solid #F57C00;
    border-radius: 8px;
    padding: 10px;
    font-size: 18px;
}

QPushButton {
    background-color: #1976D2;
    color: #FFFFFF;
    border: 2px solid #F57C00;
    border-radius: 10px;
    font-size: 20px;
    font-weight: bold;
    padding: 12px;
    margin-top: 15px;
}

QPushButton:hover {
    background-color: #F57C00;
    color: #222222;
    border-color: #FFD700;
}

QPushButton:pressed {
    background-color: #D84315;
}

QLineEdit:focus {
    border: 2px solid #FFD700;
}

QMessageBox {
    background-color: #222222;
    color: #FFD700;
    font-size: 16px;
}
"""




class CadastroWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Cadastro de Usuário")
        self.setGeometry(100, 100, 400, 300)

        self.setWindowIcon(QIcon("images/icon.png")) 
       

        self.widget = QWidget()
        self.setCentralWidget(self.widget)

        layout = QVBoxLayout()

        # Layout para o formulário
        form_layout = QFormLayout()

        # Campos do formulário
        self.nome = QLineEdit()
        self.senha = QLineEdit()
        self.senha.setEchoMode(QLineEdit.Password)
        


        self.setStyleSheet(STYLE)  

        self.salario = QLineEdit()
        self.salario.setValidator(QIntValidator())  # Validador para números inteiros
        self.despesa = QLineEdit()
        self.despesa.setValidator(QIntValidator())  # Validador para números inteiros
        self.investimentos = QLineEdit()
        self.investimentos.setValidator(QIntValidator())  # Validador para números inteiros
        self.rendaextra = QLineEdit()
        self.veiculos = QLineEdit()
        self.gasolina = QLineEdit()
        self.cursos = QLineEdit()

        # Adicionar os campos ao layout do formulário
        form_layout.addRow("Nome", self.nome)
        form_layout.addRow("Senha", self.senha)
        form_layout.addRow("Salário", self.salario)
        form_layout.addRow("Despesa", self.despesa)
        form_layout.addRow("Investimentos", self.investimentos)
        form_layout.addRow("Renda Extra", self.rendaextra)
        form_layout.addRow("Veículos", self.veiculos)
        form_layout.addRow("Gasolina", self.gasolina)
        form_layout.addRow("Cursos", self.cursos)

        # Botão de cadastro
        self.cadastrar_btn = QPushButton("Cadastrar")
        self.cadastrar_btn.clicked.connect(self.cadastrar)  # Conectando o botão à função
        form_layout.addRow(self.cadastrar_btn)

        layout.addLayout(form_layout)
        self.widget.setLayout(layout)

    def connect_db(self):
        """Conecta ao banco de dados MySQL"""
        try:
            conn = mysql.connector.connect(
                host="localhost",
                user="root",
                password="",
                database="mau_mau"
            )
            return conn
        except mysql.connector.Error as err:
            self.show_message("Erro", f"Erro ao conectar ao banco de dados: {err}")
            return None

    def cadastrar(self):
        # Validação dos dados
        if not self.nome.text():
            self.show_message("Erro", "O campo 'Nome' é obrigatório.")
            return
       
        if not self.salario.text() or not self.despesa.text():  # Verificar se os campos não estão vazios
            self.show_message("Erro", "Salário e Despesa são obrigatórios.")
            return
        
        # Inserir dados no banco de dados
        self.salvar_no_banco()

    def salvar_no_banco(self):
        try:
            # Conectar ao banco de dados
            conn = self.connect_db()
            if conn is None:
                return

            cursor = conn.cursor()

            # Inserir os dados na tabela users
            cursor.execute('''
                INSERT INTO users (username, password)
                VALUES (%s, %s)
            ''', (self.nome.text(), self.senha.text()))

            # Obter o ID do usuário recém-criado
            user_id = cursor.lastrowid

            # Inserir os dados na tabela cadastro
            cursor.execute('''
                INSERT INTO cadastro (user_id, salario, despesa, investimentos, rendaextra, veiculos, gasolina, cursos)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            ''', (user_id, self.salario.text(), self.despesa.text(), 
                  self.investimentos.text(), self.rendaextra.text(),
                  self.veiculos.text(), self.gasolina.text(), self.cursos.text()))

            # Salvar as alterações e fechar a conexão
            conn.commit()
            conn.close()

            # Dados do usuário para exibir no perfil
            user_data = {
                "salario": self.salario.text(),
                "despesa": self.despesa.text(),
                "investimentos": self.investimentos.text(),
                "rendaextra": self.rendaextra.text(),
                "veiculos": self.veiculos.text(),
                "gasolina": self.gasolina.text(),
                "cursos": self.cursos.text()
            }

            # Fechar a janela de cadastro
            self.close()

            # Abrir a tela de perfil
            self.perfil_window = PerfilWindow(user_id, self.nome.text(), user_data)
            self.perfil_window.show()

            self.show_message("Sucesso", "Cadastro realizado com sucesso!")
        except mysql.connector.Error as e:
            self.show_message("Erro", f"Erro ao salvar no banco de dados: {e}")

    def show_message(self, title, message):
        # Função para exibir uma mensagem
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information if title == "Sucesso" else QMessageBox.Critical)
        msg.setText(message)
        msg.setWindowTitle(title)
        msg.exec()

encerrar.py:
import sys
from PySide6.QtCore import Qt
from PySide6.QtGui import QMovie
from PySide6.QtWidgets import QApplication, QLabel, QVBoxLayout, QWidget



STYLE = """
QWidget {
    background-color: #222222;
    color: #FFD700;
    font-family: 'Saiyan Sans', Arial, sans-serif;
}

QLabel {
    color: #F57C00;
    font-size: 24px;
    font-weight: bold;
    text-align: center;
}

QLineEdit {
    background-color: #333333;
    color: #FFD700;
    border: 2px solid #F57C00;
    border-radius: 8px;
    padding: 10px;
    font-size: 18px;
}

QPushButton {
    background-color: #1976D2;
    color: #FFFFFF;
    border: 2px solid #F57C00;
    border-radius: 10px;
    font-size: 20px;
    font-weight: bold;
    padding: 12px;
    margin-top: 15px;
}

QPushButton:hover {
    background-color: #F57C00;
    color: #222222;
    border-color: #FFD700;
}

QPushButton:pressed {
    background-color: #D84315;
}

QLineEdit:focus {
    border: 2px solid #FFD700;
}

QMessageBox {
    background-color: #222222;
    color: #FFD700;
    font-size: 16px;
}
"""

class Encerrar(QWidget):
    def __init__(self):
        super().__init__()

        # Layout principal
        layout = QVBoxLayout()

        # Cria o QLabel onde o GIF será exibido
        label = QLabel(self)
        
        # Carrega o GIF usando QMovie
        movie = QMovie("images/goku.gif")
        
        # Define o movie no QLabel
        label.setMovie(movie)
        
        # Inicia a animação do GIF
        movie.start()

        # Adiciona o QLabel ao layout
        layout.addWidget(label)

        # Configura o layout na janela principal
        self.setLayout(layout)
        self.setWindowTitle("Exemplo de GIF com PySide6")
        self.setGeometry(100, 100, 400, 400)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = Encerrar()
    window.show()
    sys.exit(app.exec())

login.py :
# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'loginzTklpm.ui'
##
## Created by: Qt User Interface Compiler version 6.8.2
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################
import os


from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QBrush, QColor, QConicalGradient, QCursor,
    QFont, QFontDatabase, QGradient, QIcon,QDoubleValidator,
    QImage, QKeySequence, QLinearGradient, QPainter,
    QPalette, QPixmap, QRadialGradient, QTransform)
from PySide6.QtWidgets import (QApplication, QDialog, QGridLayout, QLabel,
    QLineEdit, QPushButton, QSizePolicy, QWidget)



STYLE = """
QWidget {
    background-color: #222222;
    color: #FFD700;
    font-family: 'Saiyan Sans', Arial, sans-serif;
}

QLabel {
    color: #F57C00;
    font-size: 24px;
    font-weight: bold;
    text-align: center;
}

QLineEdit {
    background-color: #333333;
    color: #FFD700;
    border: 2px solid #F57C00;
    border-radius: 8px;
    padding: 10px;
    font-size: 18px;
}

QPushButton {
    background-color: #1976D2;
    color: #FFFFFF;
    border: 2px solid #F57C00;
    border-radius: 10px;
    font-size: 20px;
    font-weight: bold;
    padding: 12px;
    margin-top: 15px;
}

QPushButton:hover {
    background-color: #F57C00;
    color: #222222;
    border-color: #FFD700;
}

QPushButton:pressed {
    background-color: #D84315;
}

QLineEdit:focus {
    border: 2px solid #FFD700;
}

QMessageBox {
    background-color: #222222;
    color: #FFD700;
    font-size: 16px;
}
"""

class Ui_Login(object):
    def setupUi(self, Login):
        if not Login.objectName():
            Login.setObjectName(u"Login")
        Login.resize(678, 513)
        self.layoutWidget = QWidget(Login)

        Login.setWindowIcon(QIcon("images/icon.png"))  # Altere o caminho para o seu ícone
        self.layoutWidget.setObjectName(u"layoutWidget")
        self.layoutWidget.setGeometry(QRect(20, 30, 642, 408))
        self.gridLayout = QGridLayout(self.layoutWidget)
        self.gridLayout.setObjectName(u"gridLayout")
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.alogo = QLabel(self.layoutWidget)
        self.alogo.setObjectName(u"alogo")
        self.alogo.setPixmap(QPixmap(u"./images/teste.PNG"))

        self.gridLayout.addWidget(self.alogo, 0, 0, 1, 1)

        self.lineEdit_user = QLineEdit(self.layoutWidget)
        self.lineEdit_user.setObjectName(u"lineEdit_user")

        self.gridLayout.addWidget(self.lineEdit_user, 1, 0, 1, 2)

        self.lineEdit_password = QLineEdit(self.layoutWidget)
        self.lineEdit_password.setObjectName(u"lineEdit_password")
        self.lineEdit_password.setEchoMode(QLineEdit.EchoMode.Password)

        self.gridLayout.addWidget(self.lineEdit_password, 2, 0, 1, 2)

        self.btn_login = QPushButton(self.layoutWidget)
        self.btn_login.setObjectName(u"btn_login")

        self.gridLayout.addWidget(self.btn_login, 3, 0, 1, 2)


        self.retranslateUi(Login)

        QMetaObject.connectSlotsByName(Login)
    # setupUi

    def retranslateUi(self, Login):
        Login.setWindowTitle(QCoreApplication.translate("Login", u"Login", None))
        self.lineEdit_user.setPlaceholderText(QCoreApplication.translate("Login", u"Digite seu usu\u00e1rio", None))
        self.lineEdit_password.setPlaceholderText(QCoreApplication.translate("Login", u"Digite sua senha", None))
        self.btn_login.setText(QCoreApplication.translate("Login", u"Entrar", None))
    # retranslateUi

perfil.py:
from PySide6.QtWidgets import (
    QMainWindow, QVBoxLayout, QLabel, QWidget, QPushButton
)
from PySide6.QtGui import QIcon
from .encerrar import Encerrar

STYLE = """
QWidget {
    background-color: #222222;
    color: #FFD700;
    font-family: 'Saiyan Sans', Arial, sans-serif;
}

QLabel {
    color: #F57C00;
    font-size: 24px;
    font-weight: bold;
    text-align: center;
    text-transform: uppercase;
}

QLineEdit {
    background-color: #333333;
    color: #FFD700;
    border: 2px solid #F57C00;
    border-radius: 8px;
    padding: 10px;
    font-size: 18px;
}

QPushButton {
    background-color: #1976D2;
    color: #FFFFFF;
    border: 2px solid #F57C00;
    border-radius: 10px;
    font-size: 20px;
    font-weight: bold;
    padding: 12px;
    margin-top: 15px;
    
}

QPushButton:hover {
    background-color: #F57C00;
    color: #222222;
    border-color: #FFD700;
}

QPushButton:pressed {
    background-color: #D84315;
}

QLineEdit:focus {
    border: 2px solid #FFD700;
}

QMessageBox {
    background-color: #222222;
    color: #FFD700;
    font-size: 16px;
}
"""




class PerfilWindow(QMainWindow):
    def __init__(self, user_id, username, user_data):
        super().__init__()
        self.user_id = user_id
        self.username = username
        self.user_data = user_data

        self.setWindowTitle("Perfil do Usuário")
        self.setGeometry(100, 100, 400, 500)


        self.setWindowIcon(QIcon("images/icon.png"))  # Altere o caminho para o seu ícone

        # Widget central
        self.widget = QWidget()
        self.setCentralWidget(self.widget)

        # self.setWindowIcon(QIcon("images/icon.png"))

        # Layout principal
        layout = QVBoxLayout()
        self.setStyleSheet(STYLE)  

        # Exibir o nome do usuário
        self.label_nome = QLabel(f"Bem-vindo, {self.username}!")
        layout.addWidget(self.label_nome)

        # Exibir as informações cadastradas
        self.label_salario = QLabel(f"Salário: {self.user_data['salario']} ")
        self.label_despesa = QLabel(f"Despesa: {self.user_data['despesa']}")
        self.label_investimentos = QLabel(f"Investimentos: {self.user_data['investimentos']}")
        self.label_rendaextra = QLabel(f"Renda Extra: {self.user_data['rendaextra']}")
        self.label_veiculos = QLabel(f"Veículos: {self.user_data['veiculos']}")
        self.label_gasolina = QLabel(f"Gasolina: {self.user_data['gasolina']}")
        self.label_cursos = QLabel(f"Cursos: {self.user_data['cursos']}")

      

        layout.addWidget(self.label_salario)
        layout.addWidget(self.label_despesa)
        layout.addWidget(self.label_investimentos)
        layout.addWidget(self.label_rendaextra)
        layout.addWidget(self.label_veiculos)
        layout.addWidget(self.label_gasolina)
        layout.addWidget(self.label_cursos)

        # Botão para fechar a tela
        self.btn_fechar = QPushButton("Fechar")
        self.btn_fechar.clicked.connect(self.close)
        layout.addWidget(self.btn_fechar)

        # Definir o layout no widget
        self.widget.setLayout(layout)

         # Botão para abrir a tela de "Encerrar"
        self.btn_encerrar = QPushButton("Encerrar")
        self.btn_encerrar.clicked.connect(self.abrir_tela_encerrar)
        layout.addWidget(self.btn_encerrar)

        # Definir o layout no widget
        self.widget.setLayout(layout)

    def abrir_tela_encerrar(self):
        """Abre a tela de encerramento com o GIF"""
        self.encerrar_window = Encerrar()
        self.encerrar_window.show()




main.py:
import sys
from PySide6.QtWidgets import QApplication, QMainWindow, QMessageBox, QDialog
import mysql.connector
from model.login import Ui_Login  
from model.cadastrar import CadastroWindow
from model.perfil import PerfilWindow
# Estilo CSS
# Estilo CSS (sem a propriedade transition)
STYLE = """
QWidget {
    background-color: #222222;
    color: #FFD700;
    font-family: 'Saiyan Sans', Arial, sans-serif;
}

QLabel {
    color: #F57C00;
    font-size: 24px;
    font-weight: bold;
    text-align: center;
   
}

QLineEdit {
    background-color: #333333;
    color: #FFD700;
    border: 2px solid #F57C00;
    border-radius: 8px;
    padding: 10px;
    font-size: 18px;
}

QPushButton {
    background-color: #1976D2;
    color: #FFFFFF;
    border: 2px solid #F57C00;
    border-radius: 10px;
    font-size: 20px;
    font-weight: bold;
    padding: 12px;
    margin-top: 15px;
   
}

QPushButton:hover {
    background-color: #F57C00;
    color: #222222;
    border-color: #FFD700;
}

QPushButton:pressed {
    background-color: #D84315;
}

QLineEdit:focus {
    border: 2px solid #FFD700;
}

QMessageBox {
    background-color: #222222;
    color: #FFD700;
    font-size: 16px;
}
"""





class LoginApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_Login()
        self.ui.setupUi(self)
        self.user_id = None

        self.setStyleSheet(STYLE)  


        self.ui.btn_login.clicked.connect(self.check_login)

    def connect_db(self):
        """Conecta ao banco de dados"""
        try:
            conn = mysql.connector.connect(
                host="localhost",
                user="root",
                password="",
                database="mau_mau"
            )
            return conn
        except mysql.connector.Error as err:
            QMessageBox.critical(self, "Erro", f"Erro ao conectar ao banco de dados: {err}")
            return None

    def check_login(self):
        """Verifica o login do usuário"""
        usuario = self.ui.lineEdit_user.text()
        senha = self.ui.lineEdit_password.text()

        conn = self.connect_db()
        if conn is None:
            return

        cursor = conn.cursor()
        query = "SELECT id, username FROM users WHERE username = %s AND password = %s"
        cursor.execute(query, (usuario, senha))
        user = cursor.fetchone()

        if user:
            self.user_id, self.username = user  # Armazena ID e Nome
            QMessageBox.information(self, "Login", "Login bem-sucedido!")
            self.close()
           
            # Abrir a janela de cadastro após o login
            self.cadastro_window = CadastroWindow()
            self.cadastro_window.show()
            
        else:
            QMessageBox.warning(self, "Erro", "Usuário ou senha incorretos!")

        cursor.close()
        conn.close()
        

    

# Inicializa o aplicativo
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = LoginApp()
    window.show()
    sys.exit(app.exec())